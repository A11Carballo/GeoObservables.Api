// <auto-generated />
using System;
using GeoObservables.Api.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoObservables.Api.DataAccess.Migrations
{
    [DbContext(typeof(GeoObservablesDBContext))]
    [Migration("20220821150521_Migration2")]
    partial class Migration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.7.22376.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeoObservables.Api.DataAccess.Contracts.Entities.HFlowdataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Datacreated")
                        .HasColumnType("int");

                    b.Property<int>("Datamodified")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Hflow")
                        .HasColumnType("float");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<int>("idOrigin")
                        .HasColumnType("int");

                    b.Property<int>("idUserCreate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idOrigin");

                    b.HasIndex("idUserCreate");

                    b.ToTable("HFlowdata", (string)null);
                });

            modelBuilder.Entity("GeoObservables.Api.DataAccess.Contracts.Entities.OriginEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Origin", (string)null);
                });

            modelBuilder.Entity("GeoObservables.Api.DataAccess.Contracts.Entities.RolesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("GeoObservables.Api.DataAccess.Contracts.Entities.UsersEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GeoObservables.Api.DataAccess.Contracts.Entities.HFlowdataEntity", b =>
                {
                    b.HasOne("GeoObservables.Api.DataAccess.Contracts.Entities.OriginEntity", "Origin")
                        .WithMany("HFlowdata")
                        .HasForeignKey("idOrigin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoObservables.Api.DataAccess.Contracts.Entities.UsersEntity", "User")
                        .WithMany("HFlowdata")
                        .HasForeignKey("idUserCreate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Origin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GeoObservables.Api.DataAccess.Contracts.Entities.UsersEntity", b =>
                {
                    b.HasOne("GeoObservables.Api.DataAccess.Contracts.Entities.RolesEntity", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("GeoObservables.Api.DataAccess.Contracts.Entities.OriginEntity", b =>
                {
                    b.Navigation("HFlowdata");
                });

            modelBuilder.Entity("GeoObservables.Api.DataAccess.Contracts.Entities.RolesEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GeoObservables.Api.DataAccess.Contracts.Entities.UsersEntity", b =>
                {
                    b.Navigation("HFlowdata");
                });
#pragma warning restore 612, 618
        }
    }
}
